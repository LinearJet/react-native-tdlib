# .github/workflows/build-android.yml

name: Build Android Example APK

# This workflow runs whenever you push code to the 'main' branch
on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of machine to run the job on
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get the code from your repository
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4 for consistency

      # Step 2: Set up Node.js so we can run 'npm install'
      - name: Set up Node.js
        uses: actions/setup-node@v4 # Updated to v4 for consistency
        with:
          node-version: '18'

      # Step 3: Set up Java Development Kit (JDK) 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4 # Updated to v4 for consistency
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 4: Set up the Android SDK. This is the magic step.
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3 # v3 is current for this action

      # Step 5: Install the project's dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./example # Run this command inside the 'example' folder

      # Step 6: Make the Gradle wrapper executable. A necessary step on Linux.
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./example/android

      # Step 7: Run the Gradle build to create the debug APK
      - name: Build debug APK
        run: ./gradlew assembleDebug
        working-directory: ./example/android

      # Step 8: Upload the generated APK as an artifact
      # This makes the APK available for download from the workflow's summary page.
      - name: Upload APK
        uses: actions/upload-artifact@v4 # <-- THE FIX IS HERE
        with:
          name: skyth-example-apk
          path: example/android/app/build/outputs/apk/debug/app-debug.apk